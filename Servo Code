/*
 * Servo Testing
 *
 * Created: 11/1/2016 2:45:16 PM
 * Author : Dwayne Hoeck
 */ 

#define F_CPU 1000000UL							// Defines CPU I/O speed
#include <avr/io.h>								// AVR I/O header file
#include <avr/interrupt.h>						// AVR interrupts header file
#include <util/delay.h>

#define MOTOR_ON      PORTD |= (1 << PORTD3)		// Writes high to pin D3, used in PWM_Init() function
#define MOTOR_OFF     PORTD &= ~(1 << PORTD3)	// Writes low to pin D3, used in PWM_Init() function

ISR(TIMER1_COMPA_vect)							// Interrupt service routine for OCRnA (output compare register A)
{												// On portion of the PWM cycle
	MOTOR_ON;									// Macro turns MOTOR on, defined above
}

ISR(TIMER1_COMPB_vect)							// Interrupt service routine for OCRnB (output compare register B)
{												// Off portion of the PWM cycle
	MOTOR_OFF;									// Macro turns MOTOR off, defined above
}

void PWM_Init(void)								// Function for PWM (pulse width modulation)
{
	TCCR1B |= (1 << CS10) | (1 << WGM12);		// Sets CS(clock set) prescaler to zero and WGM (wave generation mode) bits in TCCR1A (timer/counter control register)
	TIMSK1 |= (1 << OCIE1A) | (1 << OCIE1B);		// Sets OCIE1x (output compare interrupt enable) register in TIMSK1 (timer mask) register
	OCR1A =	20000;								// Sets PWM period to 20ms (50Hz) by writing to OCR1A (output compare) register with TOP value of counter
	OCR1B = 3000;								// Extend arm by writing longer pulse width to OCR1B (output compare) register 
	_delay_ms(500);								// Delay to give arm enough time to flip switch before retracting
	OCR1B = 1000;								// Retract arm by writing shorter pulse width to OCR1B (output compare) register 
}

int main(void)									// Main function
{
	DDRD |= (1 << DDD3);							// Set pin D3 as output (data direction register, PORT B, PIN 3)
	sei();										// Global interrupts enable
	PWM_Init();									// PWM (pulse width modulation) function
	
    while (1) 
    {
	
	}
}
